<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="_enemy_8cpp" kind="file" language="C++">
    <compoundname>Enemy.cpp</compoundname>
    <includes refid="_enemy_8h" local="yes">Enemy.h</includes>
    <incdepgraph>
      <node id="5">
        <label>AStar.h</label>
        <link refid="_a_star_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>Colors.h</label>
        <link refid="_colors_8h"/>
      </node>
      <node id="23">
        <label>Damage.h</label>
        <link refid="_damage_8h"/>
      </node>
      <node id="1">
        <label>src/Enemy.cpp</label>
        <link refid="_enemy_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Enemy.h</label>
        <link refid="_enemy_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>FieldObject.h</label>
        <link refid="_field_object_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Life.h</label>
        <link refid="_life_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>Node.h</label>
        <link refid="_node_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Soldier.h</label>
        <link refid="_soldier_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Vector2Int.h</label>
        <link refid="_vector2_int_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="4">
        <label>chrono</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="10">
        <label>limits</label>
      </node>
      <node id="20">
        <label>map</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="6">
        <label>queue</label>
      </node>
      <node id="3">
        <label>random</label>
      </node>
      <node id="17">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>unordered_map</label>
      </node>
      <node id="14">
        <label>unordered_set</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_enemy_8h" kindref="compound">Enemy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="class_enemy_1a68dc3ffaa4301eb59395d7449da3b956" refkind="member"><highlight class="normal"><ref refid="class_enemy_1a68dc3ffaa4301eb59395d7449da3b956" kindref="member">Enemy::Enemy</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>teamColor,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>speed,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>startingHealth,<sp/><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref><sp/>position,<sp/><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref><sp/>direction,<sp/>std::shared_ptr&lt;FieldObject&gt;<sp/>targetObject)</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_soldier" kindref="compound">Soldier</ref>(teamColor,<sp/>speed,<sp/>startingHealth,<sp/>position,<sp/>direction),<sp/><ref refid="class_damage" kindref="compound">Damage</ref>(1),<sp/>targetObject(targetObject),<sp/>tickRate(100),<sp/>lastDecisionTime(std::chrono::steady_clock::now())<sp/>{}</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="class_enemy_1ad87fa2fc1271434d29e72d313b3413b4" refkind="member"><highlight class="normal"><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref><sp/><ref refid="class_enemy_1ad87fa2fc1271434d29e72d313b3413b4" kindref="member">Enemy::NextDirection</ref>()</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/><ref refid="struct_vector2_int_1a1bd4a637f718f5324530a06eeb6648ae" kindref="member">Vector2Int::Distance</ref>(<ref refid="class_field_object_1a171a6bf6a57457e18208ebcf8cb02a9c" kindref="member">position</ref>,<sp/>targetObject-&gt;Position());</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentTime<sp/>=<sp/>std::chrono::steady_clock::now();</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(currentTime<sp/>-<sp/>lastDecisionTime).count();</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elapsedTime<sp/>&lt;=<sp/>tickRate)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>=<sp/><ref refid="struct_vector2_int_1a47e1fa2c4d20433493421c8e6b393d55" kindref="member">Vector2Int::Zero</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(distance<sp/>&gt;=<sp/>25)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>=<sp/>RandomDirection();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!directionPath.empty()<sp/>&amp;&amp;<sp/>pathIterator<sp/>!=<sp/>directionPath.end())</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_field_object_1a9590a56551a007ab5a008055ad4ee30b" kindref="member">WillCollideWithCave</ref>(*pathIterator))</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>=<sp/>*pathIterator++;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>directionPath<sp/>=<sp/><ref refid="class_a_star_1a77dd0de7235076265b212b7d1dd4a084" kindref="member">AStar::DirectionPath</ref>(<ref refid="class_field_object_1a171a6bf6a57457e18208ebcf8cb02a9c" kindref="member">position</ref>,<sp/>targetObject-&gt;Position(),<sp/><ref refid="class_field_object_1abae00928de496ec59b6df92dad27d995" kindref="member">cave</ref>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathIterator<sp/>=<sp/>directionPath.begin();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!directionPath.empty()<sp/>&amp;&amp;<sp/>pathIterator<sp/>!=<sp/>directionPath.end())</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_field_object_1a9590a56551a007ab5a008055ad4ee30b" kindref="member">WillCollideWithCave</ref>(*pathIterator))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>=<sp/>*pathIterator++;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>==<sp/><ref refid="struct_vector2_int_1a47e1fa2c4d20433493421c8e6b393d55" kindref="member">Vector2Int::Zero</ref>)</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>=<sp/>RandomDirection();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastDecisionTime<sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref><sp/>Enemy::RandomDirection()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref><sp/>!=<sp/><ref refid="struct_vector2_int_1a47e1fa2c4d20433493421c8e6b393d55" kindref="member">Vector2Int::Zero</ref><sp/>&amp;&amp;<sp/>!<ref refid="class_field_object_1a9590a56551a007ab5a008055ad4ee30b" kindref="member">WillCollideWithCave</ref>(<ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref>))</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_field_object_1a84b942ec7b6ccef85e0f1d8e9c453932" kindref="member">direction</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Vector2Int&gt;<sp/>validDirections;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref><sp/>randomDirection<sp/>=<sp/><ref refid="struct_vector2_int_1a47e1fa2c4d20433493421c8e6b393d55" kindref="member">Vector2Int::Zero</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>dir<sp/>:<sp/><ref refid="struct_vector2_int" kindref="compound">Vector2Int</ref>::Directions)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_field_object_1a9590a56551a007ab5a008055ad4ee30b" kindref="member">WillCollideWithCave</ref>(dir))<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>validDirections.push_back(dir);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!validDirections.empty())<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::random_device<sp/>rd;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::mt19937<sp/>gen(rd());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::uniform_int_distribution&lt;size_t&gt;<sp/>distribution(0,<sp/>validDirections.size()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>randomIndex<sp/>=<sp/>distribution(gen);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>randomDirection<sp/>=<sp/>validDirections[randomIndex];</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>randomDirection;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/Enemy.cpp"/>
  </compounddef>
</doxygen>
